set -e

# cargo update
# WASI_BUILD_DIR=components/eth-price-oracle make wasi-build

OPERATOR_PRIVATE_KEY=${OPERATOR_PRIVATE_KEY:-""}
if [ -z "$OPERATOR_PRIVATE_KEY" ]; then
  echo "OPERATOR_PRIVATE_KEY is not set. Please set it before running this script."
  exit 1
fi

# Set ENV Variables
WAVS_SERVICE_MANAGER=`cat .nodes/avs_deploy.json | jq -r .addresses.WavsServiceManager`
OPERATOR_ADDRESS=`cast wallet address --private-key $OPERATOR_PRIVATE_KEY`

# Start
while [ ! -f .docker/start.log ]; do echo "waiting for start.log" && sleep 1; done

export SERVICE_MANAGER_ADDRESS=$(jq -r .addresses.WavsServiceManager .nodes/avs_deploy.json)
export PRIVATE_KEY=$(cat .nodes/deployer)
export MY_ADDR=$(cast wallet address --private-key $PRIVATE_KEY)

forge create SimpleSubmit --json --broadcast -r http://127.0.0.1:8545 --private-key "${PRIVATE_KEY}" --constructor-args "${SERVICE_MANAGER_ADDRESS}" > .docker/submit.json
export SERVICE_SUBMISSION_ADDR=`jq -r .deployedTo .docker/submit.json`

forge create SimpleTrigger --json --broadcast -r http://127.0.0.1:8545 --private-key "${PRIVATE_KEY}" > .docker/trigger.json
export SERVICE_TRIGGER_ADDR=`jq -r .deployedTo .docker/trigger.json`

# Build your service JSON with optional overrides in the script
COMPONENT_FILENAME=eth_price_oracle.wasm AGGREGATOR_URL=http://127.0.0.1:8001 sh ./script/build_service.sh

# TODO: move over to proper area in the script
# change the owner of the service from the deployer -> the AVS account
cast call ${WAVS_SERVICE_MANAGER} 'owner()' --rpc-url http://localhost:8545
cast send ${WAVS_SERVICE_MANAGER} 'transferOwnership(address)' ${OPERATOR_ADDRESS} --rpc-url http://localhost:8545 --private-key $PRIVATE_KEY

# Deploy the service JSON to WAVS so it now watches and submits
# the results based on the service json configuration.
export ETH_CREDENTIAL=${OPERATOR_PRIVATE_KEY}
# faucet some funds from PRIVATE_KEY -> OPERATOR_ADDRESS
cast send ${OPERATOR_ADDRESS} --rpc-url http://localhost:8545 --private-key $PRIVATE_KEY --value 1000000000000000000
# deploy
SERVICE_CONFIG_FILE=.docker/service.json make deploy-service

# Request BTC from CMC
export COIN_MARKET_CAP_ID=1
# Get the trigger address from previous Deploy forge script
export SERVICE_TRIGGER_ADDR=`make get-trigger-from-deploy`
# Execute on the trigger contract, WAVS will pick this up and submit the result
# on chain via the operators.
forge script ./script/Trigger.s.sol ${SERVICE_TRIGGER_ADDR} ${COIN_MARKET_CAP_ID} --sig 'run(string,string)' --rpc-url http://localhost:8545 --broadcast -v 4
sleep 1
TRIGGER_ID=1 make show-result
