---
description: Overview of WAVS service components, their structure, and usage in Rust and other languages

alwaysApply: true
---
# WAVS Service Components Overview

WAVS components contain the main business logic of a service, written in languages compiled to WASM (mainly Rust, also Go and TypeScript/JS). Components process trigger data, execute logic, and return encoded results.

## Component Structure

A basic component consists of:

1. Decoding incoming [trigger data](../triggers#trigger-lifecycle).
2. Processing the data (custom business logic).
3. Encoding and returning results for submission.

### Trigger Inputs

- **On-chain events:** Triggered by EVM events, data arrives as `TriggerData::EvmContractEvent`.
- **Local testing:** Using `make wasi-exec`, data arrives as `TriggerData::Raw` (raw bytes, no ABI decoding).

Example decoding in `trigger.rs`:

```rust
pub fn decode_trigger_event(trigger_data: TriggerData) -> Result<(u64, Vec<u8>, Destination)> {
    match trigger_data {
        TriggerData::EvmContractEvent(TriggerDataEvmContractEvent { log, .. }) => {
            let event: solidity::NewTrigger = decode_event_log_data!(log)?;
            let trigger_info =
                <solidity::TriggerInfo as SolValue>::abi_decode(&event._triggerInfo)?;
            Ok((trigger_info.triggerId, trigger_info.data.to_vec(), Destination::Ethereum))
        }
        TriggerData::Raw(data) => Ok((0, data.clone(), Destination::CliOutput)),
        _ => Err(anyhow::anyhow!("Unsupported trigger data type")),
    }
}

pub mod solidity {
    use alloy_sol_macro::sol;
    pub use ITypes::*;
    sol!("../../src/interfaces/ITypes.sol");

    sol! {
        function addTrigger(string data) external;
    }
}
```

- Use `decode_event_log_data!` macro from [`wavs-wasi-utils`](https://docs.rs/wavs-wasi-utils/latest/wavs_wasi_utils/macro.decode_event_log_data.html) for decoding.
- Use `sol!` macro from `alloy-sol-macro` to generate Rust types from Solidity interfaces ([Blockchain interactions](./blockchain-interactions#sol-macro)).

### Component Logic

Implement the `Guest` trait with the `run` function as entry point:

```rust
impl Guest for Component {
    fn run(action: TriggerAction) -> Result<Option<WasmResponse>, String> {
        let (trigger_id, req, dest) = decode_trigger_event(action.data)?;
        let res = block_on(async move {
            let resp_data = get_price_feed(id).await?;
            serde_json::to_vec(&resp_data)
        })?;

        let output = match dest {
            Destination::Ethereum => Some(encode_trigger_output(trigger_id, &res)),
            Destination::CliOutput => Some(WasmResponse {
                payload: res.into(),
                ordering: None
            }),
        };
        Ok(output)
    }
}
```

Components can include blockchain interactions, network requests, off-chain computations, etc. See [design considerations](../../design) for suitable use cases.

#### Logging

- **Development:** Use `println!()` for stdout/stderr visible in `make wasi-exec`.

```rust
println!("Debug message: {:?}", data);
```

- **Production:** Use `host::log()` with `LogLevel` for structured logging with context.

```rust
use bindings::host::{self, LogLevel};
host::log(LogLevel::Info, "Production logging message");
```

### Component Output Encoding

Encode output for Ethereum submission with `encode_trigger_output`:

```rust
pub fn encode_trigger_output(trigger_id: u64, output: impl AsRef<[u8]>) -> WasmResponse {
    WasmResponse {
        payload: solidity::DataWithId {
            triggerId: trigger_id,
            data: output.as_ref().to_vec().into(),
        }
        .abi_encode(),
        ordering: None,
    }
}
```

- Output is a `WasmResponse` containing encoded payload and optional ordering.
- WAVS routes the response per workflow submission logic.

## Component Definition in service.json

Defined under the workflow's `component` object:

```json
"component": {
    "source": {
        "Registry": {
            "registry": {
                "digest": "882b992af8f78e0aaceaf9609c7ba2ce80a22c521789c94ae1960c43a98295f5",
                "domain": "localhost:8090",
                "version": "0.1.0",
                "package": "example:evmrustoracle"
            }
        }
    },
    "permissions": {
        "allowed_http_hosts": "all",
        "file_system": true
    },
    "fuel_limit": null,
    "time_limit_seconds": 1800,
    "config": {
        "variable_1": "0xb5d4D4a87Cb07f33b5FAd6736D8F1EE7D255d9E9",
        "variable_2": "0x34045B4b0cdfADf87B840bCF544161168c8ab85A"
    },
    "env_keys": [
        "WAVS_ENV_API_KEY"
    ]
}
```

- Configure source registry, permissions, limits, config variables, and secret env keys.
- See [variables](./variables) for details on configuration.

## Registry Usage

- WAVS stores WASM components in a registry (e.g., [wa.dev](https://wa.dev)) for production.
- Local development uses a docker-compose emulated registry.
- Workflow to update registry source:

```bash
wavs-cli workflow component --id ${WORKFLOW_ID} set-source-registry --domain ${REGISTRY} --package ${PKG_NAMESPACE}:${PKG_NAME} --version ${PKG_VERSION}
```

---

For more information:

- [WAVS Triggers](../triggers#trigger-lifecycle)
- [Blockchain interactions - sol! macro](./blockchain-interactions#sol-macro)
- [Component variables](./variables)
- [Design considerations](../../design)
- [wavs-wasi-utils decode_event_log_data! macro](https://docs.rs/wavs-wasi-utils/latest/wavs_wasi_utils/macro.decode_event_log_data.html)
- [wa.dev Registry](https://wa.dev)
