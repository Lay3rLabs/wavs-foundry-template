---
description: Define and manage WAVS service workflows specifying triggers, components, and submission logic.

alwaysApply: true
---
# WAVS Service Workflows

A WAVS service consists of one or more workflows defining execution paths. Each workflow includes:

- **Trigger**: Event that starts the workflow
- **Component**: WASM component processing the event
- **Submit**: Destination for results

## Workflow Structure

Workflows are defined in the service manifest JSON under the `workflows` key, each identified by a unique UUID.

Example workflow with a cron trigger and aggregator submission:

```json service.json
"workflows": {
  "0196c34d-003d-7412-a3f3-70f8ec664e12": {
    "trigger": {
      "cron": {
        "schedule": "0 * * * * *",
        "start_time": null,
        "end_time": null
      }
    },
    "component": {
      "source": {
        "Digest": "65747b4b1a7fa98cab6abd9a81a6102068de77b1040b94de904112272b226f51"
      },
      "permissions": {
        "allowed_http_hosts": "all",
        "file_system": true
      },
      "fuel_limit": null,
      "time_limit_seconds": 1800,
      "config": {
        "nft": "0xb5d4D4a87Cb07f33b5FAd6736D8F1EE7D255d9E9",
        "reward_token": "0x34045B4b0cdfADf87B840bCF544161168c8ab85A"
      },
      "env_keys": [
        "WAVS_ENV_API_KEY"
      ]
    },
    "submit": {
      "aggregator": {
        "url": "http://127.0.0.1:8001"
      }
    },
    "aggregators": [
      {
        "evm": {
          "chain_name": "local",
          "address": "0xd6f8ff0036d8b2088107902102f9415330868109",
          "max_gas": 5000000
        }
      }
    ]
  }
}
```

## Multi-workflow Services

- Multiple workflows can coexist in one service manifest.
- Each workflow has independent trigger, component, and submission logic.
- All workflows share the same service manager and operator set.

Example:

```json
{
  "workflows": {
    "workflow-uuid-1": {
      "trigger": { ... },
      "component": { ... },
      "submit": { ... }
    },
    "workflow-uuid-2": {
      "trigger": { ... },
      "component": { ... },
      "submit": { ... }
    }
  }
}
```

## Workflow Isolation

- Each workflow runs in a separate WebAssembly environment.
- Memory and state are isolated per execution.
- Components cannot access each other's memory or state directly.

## Sharing State Between Workflows

- WAVS services focus on data processing, not storage.
- Data sharing is done via external systems (e.g., onchain smart contracts).
- Workflow A submits data externally; Workflow B reads from the same source.

Example flow:

```
A: Trigger -> component -> onchain submission storage
B: Trigger -> component (reads from A's storage) -> onchain submission storage
```

## Chaining Workflows

- Chain workflows by setting the second workflowâ€™s trigger to the onchain submission event of the first.
- This can be done within a service or across different services.

Example:

```json
{
  "workflows": {
    "workflow-uuid-1": {
      "trigger": { ... },
      "component": { ... },
      "submit": { ... }
    },
    "workflow-uuid-2": {
      "trigger": { /* onchain submission event of workflow-uuid-1 */ },
      "component": { ... },
      "submit": { ... }
    }
  }
}
```

## Multichain Services

- WAVS supports contract event or block height triggers on Cosmos and EVM chains.
- Enables cross-chain services monitoring events on one chain and submitting results to Ethereum.
- More chain triggers coming soon.

For detailed trigger options, see the [Trigger page](./triggers).

For more information:
- [WAVS Design Considerations](../design)
- [Trigger Documentation](./triggers)
- [Component Documentation](./components/component)
- [Submission Documentation](./submission)
