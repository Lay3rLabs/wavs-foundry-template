---
description: 
globs: 
alwaysApply: true
---
# WAVS Component Development Guide

## 1. Setup

1. Read all files in `.cursor/rules/*`. Do not skip any file. Read the files carefully.
2. Important!! Read each and every file in `/components/evm-price-oracle/*` and understand how the component works. Do not skip any file. Read the code carefully.

## 2. Planning

1. Plan your component implementation. **Check for dependency and Rust toolchain compatibility:**
   - Ensure all dependencies in `Cargo.toml` use workspace versions or match the root `Cargo.toml`.
   - Confirm the `rust-version` in the root `Cargo.toml` matches your installed toolchain (e.g., `rustc --version`).
   - Add your new component to the `workspace.members` array in the root `Cargo.toml`.
   - Create a file called plan.md with a complete PRD and technical plan for your component to ensure it does not have any errors.
## 3. Implementation

1. Run `mkdir -p components/my-component && cp -r components/evm-price-oracle/* components/my-component/`.
2. In the new Makefile, change `Building component: evm-price-oracle` to `Building component: my-component`. **Do not change anything else in the Makefile.**
3. **Never change the contents of `config.json` or `/src/bindings.rs`.**
4. Modify `lib.rs` with your new logic. Use the existing code as a reference for structure, but remove any existing code that is not needed.
   - Always keep input data as a string (export COIN_MARKET_CAP_ID=`cast abi-encode "f(string)" "my-input-data"`).
5. Update `Cargo.toml`:
   - Use workspace dependencies where possible.
   - Do not specify conflicting or duplicate versions.
   - Change the component name in the `package` and `name` section to your component name.
6. Important! Add your component to the `workspace.members` array in the root `Cargo.toml`.

## 4. Review

1. Review your code. make sure there are no errors.
2. make sure all dependencies are imported correctly.
3. make sure the component is working as expected.
4. Fix lint errors.

## 5. Testing

The only commands ever run are:

1. Build the component:
```bash
# Always build before testing
WASI_BUILD_DIR=components/my-component make wasi-build
```

2. Test the component with input data:
```bash
# component filename should be in the format of my_component.wasm, not my-component.wasm
export COMPONENT_FILENAME=my_component.wasm
# Always use string format for input data
export COIN_MARKET_CAP_ID=`cast abi-encode "f(string)" "my-input-data"`
# execute the component for testing
make wasi-exec
```

## Common Errors and Solutions

### 1. ABI Mismatch
- **Error**: Mismatched ABI between Rust versions (e.g., 1.86.0 vs 1.87.0)
- **Solution**: Clean build artifacts and rebuild
- **Prevention**:
  - Check `rustc --version` before starting
  - Ensure `rust-version` in Cargo.toml matches installed toolchain
  - Use workspace dependencies to maintain version consistency

### 4. Type Inference Issues
- **Error**: Type inference problems in closures
- **Solution**: Add explicit type parameters
- **Prevention**:
  - Use explicit type annotations in closures
  - Add type hints for complex operations
  - Document common type patterns

### 5. Import Issues
- **Error**: Missing required traits or incorrect imports
- **Solution**: Add necessary imports
- **Prevention**:
  - Maintain a list of commonly required imports
  - Document which traits are needed for specific operations
  - Add import checks in the review process

## Common Pitfalls & How to Avoid Them

- **Dependency Version Conflicts:**
  Always use workspace dependencies for shared crates (e.g., Alloy, Serde, wavs-wasi-utils).

- **Type Annotation Issues:**
  Avoid type annotation issues by using the correct types.

- **Workspace Membership:**
  Add every new component to the `workspace.members` array in the root `Cargo.toml` to avoid workspace errors.

- **Unused Imports:**
  Remove unused imports for a clean build.

- **Do Not Edit Bindings:**
  Never modify auto-generated files like `/src/bindings.rs`.
