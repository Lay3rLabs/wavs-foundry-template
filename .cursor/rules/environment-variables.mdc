---
description: 
globs: 
alwaysApply: false
---
---
description: Guide to using environment variables in WAVS components
globs: components/**/*.rs
alwaysApply: true
---
# Environment Variables

WAVS components can be configured using two types of environment variables: public (`kv`) and private (`host_envs`).

## Public Variables (kv)

Public variables are used for non-sensitive information that can be viewed publicly.

### Configuration

In `Makefile`:
```makefile
SERVICE_CONFIG ?= '{"fuel_limit":100000000,"max_gas":5000000,"host_envs":[],"kv":[["max_retries","3"],["timeout_seconds","30"],["api_endpoint","https://api.example.com"]],"workflow_id":"default","component_id":"default"}'
```

### Usage in Component
```rust
let max_retries = std::env::var("max_retries")?;
let timeout = std::env::var("timeout_seconds")?;
let endpoint = std::env::var("api_endpoint")?;
```

## Private Variables (host_envs)

Private variables are used for sensitive data like API keys. These must be prefixed with `WAVS_ENV_`.

### Configuration

1. Set in `.env` file:
```bash
WAVS_ENV_MY_API_KEY=your_secret_key_here
```

2. Configure in `Makefile`:
```makefile
SERVICE_CONFIG ?= '{"fuel_limit":100000000,"max_gas":5000000,"host_envs":["WAVS_ENV_MY_API_KEY"],"kv":[],"workflow_id":"default","component_id":"default"}'
```

### Usage in Component
```rust
let api_key = std::env::var("WAVS_ENV_MY_API_KEY")?;
```

## Best Practices

1. Use `WAVS_ENV_` prefix for private variables
2. Keep sensitive data in `.env` file
3. Document required variables
4. Use appropriate variable names
5. Validate variable values
6. Handle missing variables gracefully
7. Use type conversion when needed
8. Consider default values
9. Document variable purposes
10. Test with different configurations