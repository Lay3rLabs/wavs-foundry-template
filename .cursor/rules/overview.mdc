---
description: Overview of the WAVS handbook structure and key sections for building WAVS AVS services

alwaysApply: true
---
# WAVS Handbook Overview

This handbook outlines the structure and contents of the WAVS AVS documentation to guide you in building WAVS services.

1. Follow the [Oracle component tutorial](/tutorial/1-overview) first to learn WAVS basics.

2. Explore **Core Concepts**:
   - [How it works](../how-it-works): Components of a WAVS AVS.
   - [Design](../design): Design considerations.

3. Understand **Services**:
   - [Service](./service): Service structure and manifest definition.
   - [Workflows](./workflows): Execution paths, triggers, components, submissions.
   - [Triggers](./triggers): Types of triggers (EVM, Cosmos, cron, block intervals).
   - [Submission and Aggregator](./submission): Blockchain result submission via aggregator and contracts.

4. Learn about **Components**:
   - [Component overview](./components/component): Lifecycle, triggers, data processing.
   - [Variables](./components/variables): Public and private component variables.
   - [Blockchain interactions](./components/blockchain-interactions): Interacting with blockchains and smart contracts.
   - [Network requests](./components/network-requests): Making HTTP requests to external APIs.

5. Use **Development** resources:
   - [Template](./template): WAVS template structure and customization.
   - [Makefile commands](./commands): Commands to build, deploy, and manage services.

Start with the Service section for foundational knowledge, then explore other sections as needed.

For more information:
- [Oracle component tutorial](/tutorial/1-overview) - Start here to learn the basics of building a WAVS service.
- [How it works](../how-it-works) - Learn about the different parts that make up a WAVS AVS.
- [Design](../design) - Design considerations for WAVS AVS.
- [Service](./service) - WAVS service structure and manifest.
- [Workflows](./workflows) - Defining execution paths.
- [Triggers](./triggers) - Trigger types.
- [Submission and Aggregator](./submission) - Blockchain submission process.
- [Component overview](./components/component) - Component lifecycle and data handling.
- [Variables](./components/variables) - Configuring component variables.
- [Blockchain interactions](./components/blockchain-interactions) - Blockchain and smart contract interactions.
- [Network requests](./components/network-requests) - HTTP requests from components.
- [Template](./template) - WAVS template and customization.
- [Makefile commands](./commands) - Build and deploy commands.
