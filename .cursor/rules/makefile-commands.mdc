---
description: 
globs: 
alwaysApply: false
---
---
description: Guide to Makefile commands and variables for WAVS development
globs: Makefile
alwaysApply: true
---
# Makefile Commands and Variables

The Makefile contains essential commands and variables for building, testing, and deploying WAVS services.

## Key Variables

### Component Configuration
```makefile
COMPONENT_FILENAME ?= eth_price_oracle.wasm
TRIGGER_EVENT ?= NewTrigger(bytes)
SERVICE_CONFIG ?= '{"fuel_limit":100000000,"max_gas":5000000,"host_envs":[],"kv":[],"workflow_id":"default","component_id":"default"}'
```

### Network Configuration
```makefile
RPC_URL ?= http://localhost:8545
SERVICE_MANAGER_ADDR ?= `jq -r '.eigen_service_managers.local | .[-1]' .docker/deployments.json`
SERVICE_TRIGGER_ADDR ?= `jq -r '.trigger' "./.docker/script_deploy.json"`
SERVICE_SUBMISSION_ADDR ?= `jq -r '.service_handler' "./.docker/script_deploy.json"`
```

## Essential Commands

### Building and Testing
- `make wasi-build`: Builds WASI components
- `make wasi-exec`: Tests components locally
- `make build`: Builds both Solidity contracts and WASI components
- `make test`: Runs Solidity tests

### Deployment
- `make start-all`: Starts Anvil and WAVS services
- `make deploy-service`: Deploys the WAVS component service
- `make show-result`: Shows the latest result

### Contract Management
- `make get-trigger-from-deploy`: Gets trigger contract address
- `make get-service-handler-from-deploy`: Gets submission contract address
- `make get-eigen-service-manager-from-deploy`: Gets service manager address

## Usage Examples

### Deploying a Service
```bash
TRIGGER_EVENT="NewTrigger(bytes)" make deploy-service
```

### Testing a Component
```bash
COIN_MARKET_CAP_ID=1 make wasi-exec
```

### Triggering a Service
```bash
export COIN_MARKET_CAP_ID=1
export SERVICE_TRIGGER_ADDR=`make get-trigger-from-deploy`
forge script ./script/Trigger.s.sol ${SERVICE_TRIGGER_ADDR} ${COIN_MARKET_CAP_ID} --sig "run(string,string)" --rpc-url http://localhost:8545 --broadcast -v 4
```

## Best Practices

1. Always check system requirements before running commands
2. Use environment variables for sensitive data
3. Keep track of deployed contract addresses
4. Use appropriate logging levels for debugging
5. Clean up Docker containers when needed
6. Format code before committing
7. Test components locally before deployment
8. Document any custom variables or commands