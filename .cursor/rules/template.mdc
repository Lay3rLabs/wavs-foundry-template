---
description: Overview and structure guide for the WAVS foundry template.
globs: **/*.rs
alwaysApply: true
---
# WAVS Foundry Template Overview

This rule file provides a concise overview of the WAVS foundry template, guiding users on how to customize the template for creating custom services. It includes the structure of the template, key files, and their purposes, along with instructions on configuring the service using TOML files.

## Template Structure

The WAVS template includes several important files and directories:

- `README.md`: Contains tutorial commands.
- `makefile`: Includes commands for building and deploying the service, along with configurable variables.
- `components/`: Houses the component logic. Use `make wasi-build` to generate bindings and compile components.
- `compiled/`: Contains the compiled WASM files.
- `src/`: Includes Solidity contracts and interfaces for trigger and submission contracts.
- `script/`: Contains deployment, trigger, and test scripts.
- `wavs.toml`: Configures the WAVS service, including chain settings.
- `.env`: Stores private environment variables. Use `cp .env.example .env` to initialize.

## Configuration with TOML Files

The template utilizes several TOML files for configuration:

- `wavs.toml`: Configures the WAVS service.
- `Cargo.toml` (root): Configures the workspace, including dependencies and build settings.
- `Cargo.toml` (components): Each component has its own TOML file for specific configurations.

### Example of a Component's `Cargo.toml`

```toml
[package]
name = "evm-price-oracle"
edition.workspace = true
version.workspace = true
authors.workspace = true
rust-version.workspace = true
repository.workspace = true

[dependencies]
wit-bindgen-rt ={ workspace = true }
wavs-wasi-utils = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
alloy-sol-macro = { workspace = true }
wstd = { workspace = true }
alloy-sol-types = { workspace = true }
anyhow = { workspace = true }

[lib]
crate-type = ["cdylib"]

[profile.release]
codegen-units = 1
opt-level = "s"
debug = false
strip = true
lto = true

[package.metadata.component]
package = "component:evm-price-oracle"
target = "wavs:worker/layer-trigger-world@0.4.0-beta.1"
```

These TOML files can be customized to fit specific needs, with many settings overrideable via environment variables.

For more information:
- [WAVS Foundry Template on GitHub](https://github.com/Lay3rLabs/wavs-foundry-template)
- [Oracle Component Tutorial](https://github.com/Lay3rLabs/wavs-foundry-template/tutorial/1-overview)
- [WAVS Design Considerations](https://github.com/Lay3rLabs/wavs-foundry-template/design)