---
description: Guide for interacting with Ethereum and EVM-compatible blockchains from WAVS components using Rust crates and configuration.

alwaysApply: true
---
# Blockchain Interactions in WAVS Components

Use the `wavs-wasi-utils` crate and Alloy ecosystem crates to interact with Ethereum and other EVM chains from WAVS components. Define chain configs in `wavs.toml` and generate Rust types from Solidity using the `sol!` macro.

1. **Setup Dependencies**

Add these to your `Cargo.toml`:

```toml
[dependencies]
wit-bindgen-rt = { workspace = true, features = ["bitflags"] }
wavs-wasi-utils = "0.4.0-beta.4"
wstd = "0.5.3"

alloy-sol-macro = { version = "1.1.0", features = ["json"] }
alloy-sol-types = "1.1.0"
alloy-network = "0.15.10"
alloy-provider = { version = "0.15.10", default-features = false, features = ["rpc-api"] }
alloy-rpc-types = "0.15.10"
alloy-contract = "0.15.10"

anyhow = "1.0.98"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"
```

2. **Configure Chains**

Define RPC endpoints and chain IDs in `wavs.toml`:

```toml wavs.toml
[default.chains.evm.local]
chain_id = "31337"
ws_endpoint = "ws://localhost:8545"
http_endpoint = "http://localhost:8545"
poll_interval_ms = 7000

[default.chains.evm.ethereum]
chain_id = "1"
ws_endpoint = "wss://eth.drpc.org"
http_endpoint = "https://eth.drpc.org"
```

3. **Generate Rust Types from Solidity**

Use the `sol!` macro to parse Solidity interfaces and generate Rust types:

```rust
mod solidity {
    use alloy_sol_macro::sol;

    // From file
    sol!("../../src/interfaces/ITypes.sol");

    // Inline definitions
    sol! {
        struct TriggerInfo {
            uint64 triggerId;
            bytes data;
        }

        event NewTrigger(TriggerInfo _triggerInfo);
    }
}
```

Example in `trigger.rs`:

```rust trigger.rs
pub mod solidity {
    use alloy_sol_macro::sol;
    pub use ITypes::*;

    sol!("../../src/interfaces/ITypes.sol");

    sol! {
        function addTrigger(string data) external;
    }
}
```

4. **Access Chain Config and Create Provider**

Use WAVS host bindings and `new_evm_provider` to create an RPC provider:

```rust lib.rs
use crate::bindings::host::get_evm_chain_config;
use alloy_network::Ethereum;
use alloy_provider::RootProvider;
use wavs_wasi_utils::evm::new_evm_provider;

let chain_config = get_evm_chain_config("local").unwrap();

let provider: RootProvider<Ethereum> = new_evm_provider::<Ethereum>(
    chain_config.http_endpoint.unwrap(),
);
```

5. **Example: Query ERC721 NFT Balance**

```rust lib.rs
use crate::bindings::host::get_evm_chain_config;
use alloy_network::Ethereum;
use alloy_provider::RootProvider;
use alloy_sol_types::sol;
use wavs_wasi_utils::evm::{
    alloy_primitives::{Address, U256},
    new_evm_provider,
};
use alloy_rpc_types::TransactionInput;
use wstd::runtime::block_on;

sol! {
    interface IERC721 {
        function balanceOf(address owner) external view returns (uint256);
    }
}

pub fn query_nft_ownership(address: Address, nft_contract: Address) -> Result<bool, String> {
    block_on(async move {
        let chain_config = get_evm_chain_config("local").unwrap();
        let provider: RootProvider<Ethereum> = new_evm_provider::<Ethereum>(
            chain_config.http_endpoint.unwrap()
        );

        let balance_call = IERC721::balanceOf { owner: address };

        let tx = alloy_rpc_types::eth::TransactionRequest {
            to: Some(TxKind::Call(nft_contract)),
            input: TransactionInput { input: Some(balance_call.abi_encode().into()), data: None },
            ..Default::default()
        };

        let result = provider.call(tx).await.map_err(|e| e.to_string())?;

        let balance: U256 = U256::from_be_slice(&result);
        Ok(balance > U256::ZERO)
    })
}
```

6. **Additional Notes**

- Use `alloy-contract` crate for higher-level contract interactions.
- The `decode_event_log_data` macro decodes Ethereum event logs from triggers into Rust types implementing `SolEvent`.
- Re-run `cargo build` after updating Solidity files used with `sol!`.

For more information:
- [wavs-wasi-utils crate](https://docs.rs/wavs-wasi-utils/latest/wavs_wasi_utils/)
- [Alloy crate ecosystem](https://docs.rs/alloy/latest/alloy/)
- [sol! macro documentation](https://docs.rs/alloy-sol-macro/latest/alloy_sol_macro/macro.sol.html)
- [alloy-contract crate](https://crates.io/crates/alloy-contract)
- [Example NFT query](https://github.com/Lay3rLabs/wavs-art/blob/main/components/autonomous-artist/src/evm.rs)
