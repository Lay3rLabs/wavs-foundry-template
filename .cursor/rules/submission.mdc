---
description: Rules for configuring submission contracts and aggregators in WAVS services

alwaysApply: true
---
# Submission and Aggregator Configuration in WAVS

This rule explains how to configure submission contracts and aggregators to submit workflow results to an EVM chain in WAVS.

## 1. Configure Submission in `service.json`

- Use the `submit` field to define submission logic.
- For aggregator submission, specify:
```json
"submit": {
  "aggregator": {
    "url": "http://127.0.0.1:8001"
  }
},
"aggregators": [
  {
    "evm": {
      "chain_name": "local",
      "address": "0xd6f8ff0036d8b2088107902102f9415330868109",
      "max_gas": 5000000
    }
  }
]
```
- Set `"submit": "none"` if no submission is needed (component runs but results not submitted).

## 2. Submission Contract Requirements

- Must implement `handleSignedEnvelope()` from the `IWavsServiceHandler` interface.
- Use `IWavsServiceManager` to validate data and operator signatures.
- The contract processes validated data matching the component's output format.
- Example simplified contract:
```solidity
import {IWavsServiceManager} from "@wavs/interfaces/IWavsServiceManager.sol";
import {IWavsServiceHandler} from "@wavs/interfaces/IWavsServiceHandler.sol";
import {ITypes} from "interfaces/ITypes.sol";

contract SimpleSubmit is ITypes, IWavsServiceHandler {
    IWavsServiceManager private _serviceManager;

    constructor(IWavsServiceManager serviceManager) {
        _serviceManager = serviceManager;
    }

    function handleSignedEnvelope(Envelope calldata envelope, SignatureData calldata signatureData) external {
        _serviceManager.validate(envelope, signatureData);
        DataWithId memory dataWithId = abi.decode(envelope.payload, (DataWithId));
        // Custom logic to process validated data
    }
}
```

## 3. Aggregator Role and Flow

- Collects signed responses from multiple operators.
- Validates each operator's signature.
- Aggregates signatures when threshold is met (exact match aggregation).
- Submits aggregated data to the submission contract.
- Uses ECDSA signatures currently; BLS support planned.

### Aggregator Submission Flow:

1. Operator runs component â†’ returns `WasmResponse` with `payload` and optional `ordering`.
2. Operator creates signed Envelope.
3. Packet with envelope, signature, route info sent to aggregator `/packet` endpoint.
4. Aggregator validates signature and queues packets by event and service ID.
5. When threshold reached:
   - Combine signatures into one `SignatureData`.
   - Validate combined signatures on-chain.
6. On success, aggregator calls `handleSignedEnvelope()` on submit contract with aggregated data.
7. Submit contract validates data and signatures via service manager.

## 4. Workflow Chaining

- Workflows can be chained by triggering one workflow on the submission event of another.
- See the [Workflows page](./workflows) for details.

## Best Practices

- Ensure `DataWithId` struct matches component output format.
- Validate all signatures on-chain via service manager.
- Use aggregator to ensure consensus before submission.
- Set appropriate gas limits in aggregator config.
- Use local aggregator endpoint during development.

For more information:
- [WAVS Solidity Interfaces @wavs](https://www.npmjs.com/package/@wavs/solidity?activeTab=code)
- [Template Submission Contract](https://github.com/Lay3rLabs/wavs-foundry-template/blob/main/src/contracts/WavsSubmit.sol)
- [WAVS Design Considerations](/design)
- [Workflows Documentation](./workflows)
