---
description: 
globs: 
alwaysApply: false
---
---
description: Guidelines for handling submissions in WAVS components
globs: src/contracts/**/*.sol
alwaysApply: true
---
# Submission Handling

Submission contracts handle the logic for submitting a component's output to the blockchain. This guide covers how to implement and use submission contracts.

## Submission Contract Structure

A submission contract must implement the `handleSignedData()` function using the `IWavsServiceHandler` interface.

```solidity
// Example submission contract
contract WavsSubmit is IWavsServiceHandler {
    address private _serviceManager;
    mapping(uint256 => bytes) private _signatures;
    mapping(uint256 => bytes) private _datas;
    mapping(uint256 => bool) private _validTriggers;

    constructor(address serviceManager) {
        _serviceManager = serviceManager;
    }

    function handleSignedData(bytes calldata _data, bytes calldata _signature) external {
        // 1. Validate operator signature
        _serviceManager.validate(_data, _signature);

        // 2. Decode data
        DataWithId memory dataWithId = abi.decode(_data, (DataWithId));

        // 3. Store result
        _signatures[dataWithId.triggerId] = _signature;
        _datas[dataWithId.triggerId] = dataWithId.data;
        _validTriggers[dataWithId.triggerId] = true;
    }
}
```

## Component Output Format

The component's output must match the `DataWithId` struct defined in the `ITypes.sol` interface:

```solidity
struct DataWithId {
    uint256 triggerId;
    bytes data;
}
```

## Deployment Options

### With Submission Contract
```bash
make deploy-service
```

### Without Submission Contract
```bash
make deploy-service --submit none
```

## Best Practices

1. Always validate operator signatures
2. Store both data and signatures for verification
3. Use appropriate data structures for storage
4. Implement proper access control
5. Handle errors gracefully
6. Document the submission process
7. Test submission with different data types
8. Consider gas optimization for storage