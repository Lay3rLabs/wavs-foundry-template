---
description: 
globs: 
alwaysApply: false
---
---
description: Guidelines for making network requests in WAVS components
globs: components/**/*.rs
alwaysApply: true
---
# Network Requests

WAVS components can make network requests to external APIs using the `wavs-wasi-chain` crate. This guide covers how to make HTTP requests in components.

## Dependencies

Add these dependencies to your component's `Cargo.toml`:

```toml
[dependencies]
wavs-wasi-chain = { workspace = true }  # HTTP utilities
wstd = { workspace = true }             # Runtime utilities (includes block_on)
serde = { workspace = true }            # Serialization
serde_json = { workspace = true }       # JSON handling
```

## Making Requests

### GET Request Example

```rust
use wstd::runtime::block_on;
use wavs_wasi_chain::http::{http_request_get, fetch_json};

async fn make_request() -> Result<YourResponseType, String> {
    let url = "https://api.example.com/endpoint";
    let mut req = http_request_get(&url).map_err(|e| e.to_string())?;
    
    req.headers_mut().insert(
        "Accept",
        HeaderValue::from_static("application/json")
    );
    
    let json: YourResponseType = fetch_json(req)
        .await
        .map_err(|e| e.to_string())?;
        
    Ok(json)
}

fn process_data() -> Result<YourResponseType, String> {
    block_on(async move {
        make_request().await
    })?
}
```

### POST Request Example

```rust
use wavs_wasi_chain::http::http_request_post_json;

async fn make_post_request() -> Result<PostResponse, String> {
    let url = "https://api.example.com/endpoint";
    let post_data = ("key1", "value1");
    
    let response: PostResponse = fetch_json(
        http_request_post_json(&url, &post_data)?
    ).await.map_err(|e| e.to_string())?;
    
    Ok(response)
}
```

## Using Environment Variables

For API keys and sensitive data, use environment variables:

```rust
let api_key = std::env::var("WAVS_ENV_MY_API_KEY")?;
```

Configure in `Makefile`:
```makefile
SERVICE_CONFIG ?= '{"fuel_limit":100000000,"max_gas":5000000,"host_envs":["WAVS_ENV_MY_API_KEY"],"kv":[],"workflow_id":"default","component_id":"default"}'
```

## Best Practices

1. Use `block_on` for async operations
2. Implement proper error handling
3. Use environment variables for sensitive data
4. Set appropriate headers
5. Handle rate limiting
6. Implement retry logic
7. Use appropriate timeouts
8. Log request/response for debugging
9. Validate response data
10. Consider caching strategies