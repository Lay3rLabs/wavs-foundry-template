---
description: Setup and manage WAVS service triggers for onchain events and scheduled executions

alwaysApply: true
---
# WAVS Service Triggers

Triggers prompt WAVS services to run by listening for onchain events or schedules. Operators verify triggers and execute components off-chain.

## Trigger Lifecycle

1. Deploy a service with `service.json` manifest containing service info, workflow, components, triggers, and submission logic.
2. Operators maintain lookup maps for triggers by chain, contract, and event identifiers.
3. On trigger detection, operators verify and create a `TriggerAction` with config and event data.
4. `TriggerAction` structure:
```rust
pub struct TriggerAction {
    pub config: TriggerConfig,  // service_id, workflow_id, trigger type
    pub data: TriggerData,      // trigger-specific data
}

pub struct TriggerConfig {
    pub service_id: ServiceID,
    pub workflow_id: WorkflowID,
    pub trigger: Trigger,
}

pub enum TriggerData {
    CosmosContractEvent {
        contract_address: layer_climb_address::Address,
        chain_name: ChainName,
        event: cosmwasm_std::Event,
        block_height: u64,
    },
    EvmContractEvent {
        contract_address: alloy_primitives::Address,
        chain_name: ChainName,
        log: LogData,
        block_height: u64,
    },
    BlockInterval {
        chain_name: ChainName,
        block_height: u64,
    },
    Cron {
        trigger_time: Timestamp,
    }
}
```
5. `TriggerAction` is converted to WASI format and passed to components, decoded using `decode_event_log_data!` macro from [`wavs-wasi-utils`](https://docs.rs/wavs-wasi-utils/latest/wavs_wasi_utils/macro.decode_event_log_data.html).

## Trigger Configuration

Set triggers in the `trigger` field of `service.json`. Each workflow requires one trigger.

### EVM Event Trigger

Listens for specific contract events on EVM chains. Passes raw log data to the component.

Example:
```json
"trigger": {
  "evm_contract_event": {
    "address": "0x00000000219ab540356cbb839cbe05303d7705fa",
    "chain_name": "ethereum",
    "event_hash": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
  }
}
```

Configure chain in `wavs.toml`:
```toml
[default.chains.evm.ethereum]
chain_id = "1"
ws_endpoint = "wss://eth.drpc.org"
http_endpoint = "https://eth.drpc.org"
```

Set EVM credential in `.env`:
```env
WAVS_CLI_EVM_CREDENTIAL="0x5ze146f435835b1762ed602088740d201b68fd94bf808f97fd04588f1a63c9ab"
```

### Cosmos Event Trigger

Monitors Cosmos smart contract events by type and address. Passes emitted contract data to component.

Example:
```json
"trigger": {
  "cosmos_contract_event": {
    "address": {
      "Cosmos": {
        "bech32_addr": "neutron1qlaq54uh9f52d3p66q77s6kh9k9ee3vasy8gkdkk3yvgezcs6zts0mkcv4",
        "prefix_len": 7
      }
    },
    "chain_name": "neutron",
    "event_type": "send_nft"
  }
}
```

Configure chain in `wavs.toml`:
```toml
[default.chains.cosmos.neutron]
chain_id = "pion-1"
bech32_prefix = "neutron"
rpc_endpoint = "https://rpc-falcron.pion-1.ntrn.tech"
grpc_endpoint = "http://grpc-falcron.pion-1.ntrn.tech:80"
gas_price = 0.0053
gas_denom = "untrn"
```

Set Cosmos mnemonic in `.env`:
```env
WAVS_CLI_COSMOS_MNEMONIC="large slab plate twenty laundry illegal vacuum phone drum example topic reason"
```

### Cron Trigger

Executes component on a schedule defined by a cron expression with optional start/end times. Passes trigger timestamp.

Example:
```json
"trigger": {
  "cron": {
    "schedule": "0 */5 * * * *",
    "start_time": 1704067200000000000,
    "end_time": 1735689599000000000
  }
}
```

Cron format (seconds to day of week):

```
* * * * * *
│ │ │ │ │ └─ Day of week (0-6, Sunday=0)
│ │ │ │ └── Month (1-12)
│ │ │ └─── Day of month (1-31)
│ │ └──── Hour (0-23)
│ └───── Minute (0-59)
└────── Second (0-59)
```

Common examples:

- `0 */5 * * * *` - Every 5 minutes at 0 seconds
- `0 0 */6 * * *` - Every 6 hours
- `0 0 0 * * *` - Daily at midnight

**Note:** Cron triggers may have latency due to network and clock drift. Use block triggers for precise timing.

### Block Trigger

Runs component at regular block intervals on EVM or Cosmos chains. Passes block height and chain name.

Example:
```json
"trigger": {
  "block_interval": {
    "chain_name": "ethereum-mainnet",
    "n_blocks": 10,
    "start_block": null,
    "end_block": null
  }
}
```

## Best Practices

- Always configure chain info in `wavs.toml` and credentials in `.env`.
- Use `decode_event_log_data!` macro in components to decode trigger data.
- Use cron triggers for non-time-critical tasks; use block triggers for precise scheduling.
- Maintain accurate lookup maps for trigger verification.

For more information:
- [WAVS WASI Utils decode_event_log_data!](https://docs.rs/wavs-wasi-utils/latest/wavs_wasi_utils/macro.decode_event_log_data.html)
- [Crontab Guru - Cron Expression Tool](https://crontab.guru/)
- [WAVS Service JSON and Workflow Handbook](https://handbook.layerzero.network/handbook/service)
