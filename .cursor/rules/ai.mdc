---
description: 

alwaysApply: true
---
# AI-powered Component Creation

Use Claude or Cursor AI agents to generate WAVS components with minimal prompts. Components created by AI require thorough review and testing before production use.

## Setup

1. Clone the WAVS Foundry Template and complete system setup:

```sh
git clone https://github.com/Lay3rLabs/wavs-foundry-template.git
cd wavs-foundry-template
# Follow README system setup instructions
```

2. Install and configure Claude Code ([Claude docs](mdc:https:/docs.anthropic.com/en/docs/claude-code/getting-started)) or download Cursor ([Cursor downloads](mdc:https:/www.cursor.com/downloads)).

3. Open Claude or Cursor in the template root:

```sh
claude
# or
cursor .
```

4. For Cursor, always attach the `component-rules.mdc` file to the chat prompt:

```sh Chat
@component-rules.mdc <your prompt>
```

## Prompting AI Agents

- Use short, clear instructions.
- Provide relevant docs or `.md` files.
- Include API endpoints and response structures if needed.
- Be specific about the component functionality.
- Examples:

API component:

```
Let's make a component that takes the input of a zip code, queries the openbrewerydb, and returns the breweries in the area.  @https://api.openbrewerydb.org/v1/breweries?by_postal=92101&per_page=3
```

Contract balance component:

```
I want to build a new component that takes the input of a wallet address, queries the usdt contract, and returns the balance of that address.
```

Verifiable AI component (requires OpenAI API key in `.env`):

```
Please make a component that takes a prompt as input, sends an api request to OpenAI, and returns the response.

  Use this api structure:
  {
    "seed": $SEED,
    "model": "gpt-4o",
    "messages": [
      {"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "<PROMPT>"}
    ]
  }
 My api key is WAVS_ENV_OPENAI_KEY in my .env file.
```

Set your API key in `.env`:

```sh
cp .env.example .env
# Add your key prefixed with WAVS_ENV_
WAVS_ENV_OPENAI_KEY=your_api_key
```

## Component Creation Workflow

1. Submit prompt to AI agent.

2. Review the agent's plan in `plan.md`.

3. Agent creates component files.

4. Validate component:

```sh
make validate-component COMPONENT=your-component
```

5. Build component:

```sh
WASI_BUILD_DIR=components/my-component make wasi-build
```

6. Test component logic (replace placeholders):

```sh
export COMPONENT_FILENAME=openai_response.wasm
export INPUT_DATA="Only respond with yes or no: Is AI beneficial to the world?"
make wasi-exec
```

- Ask the agent to provide the `make wasi-exec` command; it cannot run commands itself.

7. Troubleshoot errors by sharing logs with the agent.

## Tips & Best Practices

- AI agents may be unpredictable; update rulefiles if needed.
- For complex components, build simple versions first.
- Ignore minor warnings and errors in `bindings.rs` (auto-generated).
- Avoid letting the agent edit `bindings.rs`.
- If stuck, clear history and start fresh with adjusted prompts.
- Be patient; agents may over-engineer fixes or make mistakes.

## Troubleshooting

- Provide full error context to the agent.
- Avoid letting the agent run commands; request commands instead.
- Reformat long commands to avoid line break issues.

For support, join the WAVS DEVS Telegram: https://t.me/layer_xyz/818

For more information:
- [Claude Code Getting Started](mdc:https:/docs.anthropic.com/en/docs/claude-code/getting-started)
- [Cursor Downloads](mdc:https:/www.cursor.com/downloads)
- [WAVS Foundry Template GitHub](mdc:https:/github.com/Lay3rLabs/wavs-foundry-template)
- [OpenAI Platform](mdc:https:/platform.openai.com/login)
